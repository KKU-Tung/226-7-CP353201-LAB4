<?xml version="1.0" encoding="UTF-8"?><testrun name="RobustnessTest1" project="MembershipRanking" tests="19" started="19" failures="14" errors="0" ignored="0">
  <testsuite name="sqa.test.RobustnessTest1" time="0.037" displayname="RobustnessTest1" uniqueid="[engine:junit-jupiter]/[class:sqa.test.RobustnessTest1]">
    <testsuite name="CalculateMembershipRank_Test2(sqa.test.RobustnessTest1)" time="0.037" displayname="CalculateMembershipRank_Test2(int, int, int, String)" parameters="int,int,int,java.lang.String" uniqueid="[engine:junit-jupiter]/[class:sqa.test.RobustnessTest1]/[test-template:CalculateMembershipRank_Test2(int, int, int, java.lang.String)]">
      <testcase name="CalculateMembershipRank_Test2" classname="sqa.test.RobustnessTest1" time="0.037" dynamicTest="true" displayname="[1] -1, 15, 500, Error" parameters="int,int,int,java.lang.String" uniqueid="[engine:junit-jupiter]/[class:sqa.test.RobustnessTest1]/[test-template:CalculateMembershipRank_Test2(int, int, int, java.lang.String)]/[test-template-invocation:#1]">
        <failure>
          <expected>Error</expected>
          <actual>Standard</actual>
          org.opentest4j.AssertionFailedError: expected: &lt;Error&gt; but was: &lt;Standard&gt;&#13;
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)&#13;
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)&#13;
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)&#13;
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:182)&#13;
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:177)&#13;
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:1145)&#13;
	at sqa.test.RobustnessTest1.CalculateMembershipRank_Test2(RobustnessTest1.java:17)&#13;
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)&#13;
	at java.base/java.util.Optional.ifPresent(Optional.java:178)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.SliceOps$1$1.accept(SliceOps.java:200)&#13;
	at java.base/java.util.Iterator.forEachRemaining(Iterator.java:133)&#13;
	at java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1939)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)&#13;
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)&#13;
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)&#13;
&#13;

        </failure>
      </testcase>
      <testcase name="CalculateMembershipRank_Test2" classname="sqa.test.RobustnessTest1" time="0.002" dynamicTest="true" displayname="[2] 0, 15, 500, Standard" parameters="int,int,int,java.lang.String" uniqueid="[engine:junit-jupiter]/[class:sqa.test.RobustnessTest1]/[test-template:CalculateMembershipRank_Test2(int, int, int, java.lang.String)]/[test-template-invocation:#2]"/>
      <testcase name="CalculateMembershipRank_Test2" classname="sqa.test.RobustnessTest1" time="0.001" dynamicTest="true" displayname="[3] 1, 15, 500, Standard" parameters="int,int,int,java.lang.String" uniqueid="[engine:junit-jupiter]/[class:sqa.test.RobustnessTest1]/[test-template:CalculateMembershipRank_Test2(int, int, int, java.lang.String)]/[test-template-invocation:#3]"/>
      <testcase name="CalculateMembershipRank_Test2" classname="sqa.test.RobustnessTest1" time="0.007" dynamicTest="true" displayname="[4] 50000, 15, 500, Standard" parameters="int,int,int,java.lang.String" uniqueid="[engine:junit-jupiter]/[class:sqa.test.RobustnessTest1]/[test-template:CalculateMembershipRank_Test2(int, int, int, java.lang.String)]/[test-template-invocation:#4]">
        <failure>
          <expected>Standard</expected>
          <actual>Silver</actual>
          org.opentest4j.AssertionFailedError: expected: &lt;Standard&gt; but was: &lt;Silver&gt;&#13;
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)&#13;
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)&#13;
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)&#13;
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:182)&#13;
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:177)&#13;
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:1145)&#13;
	at sqa.test.RobustnessTest1.CalculateMembershipRank_Test2(RobustnessTest1.java:17)&#13;
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)&#13;
	at java.base/java.util.Optional.ifPresent(Optional.java:178)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.SliceOps$1$1.accept(SliceOps.java:200)&#13;
	at java.base/java.util.Iterator.forEachRemaining(Iterator.java:133)&#13;
	at java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1939)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)&#13;
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)&#13;
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)&#13;
&#13;

        </failure>
      </testcase>
      <testcase name="CalculateMembershipRank_Test2" classname="sqa.test.RobustnessTest1" time="0.004" dynamicTest="true" displayname="[5] 99999, 15, 500, Standard" parameters="int,int,int,java.lang.String" uniqueid="[engine:junit-jupiter]/[class:sqa.test.RobustnessTest1]/[test-template:CalculateMembershipRank_Test2(int, int, int, java.lang.String)]/[test-template-invocation:#5]">
        <failure>
          <expected>Standard</expected>
          <actual>Silver</actual>
          org.opentest4j.AssertionFailedError: expected: &lt;Standard&gt; but was: &lt;Silver&gt;&#13;
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)&#13;
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)&#13;
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)&#13;
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:182)&#13;
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:177)&#13;
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:1145)&#13;
	at sqa.test.RobustnessTest1.CalculateMembershipRank_Test2(RobustnessTest1.java:17)&#13;
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)&#13;
	at java.base/java.util.Optional.ifPresent(Optional.java:178)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.SliceOps$1$1.accept(SliceOps.java:200)&#13;
	at java.base/java.util.Iterator.forEachRemaining(Iterator.java:133)&#13;
	at java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1939)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)&#13;
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)&#13;
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)&#13;
&#13;

        </failure>
      </testcase>
      <testcase name="CalculateMembershipRank_Test2" classname="sqa.test.RobustnessTest1" time="0.003" dynamicTest="true" displayname="[6] 100000, 15, 500, Standard" parameters="int,int,int,java.lang.String" uniqueid="[engine:junit-jupiter]/[class:sqa.test.RobustnessTest1]/[test-template:CalculateMembershipRank_Test2(int, int, int, java.lang.String)]/[test-template-invocation:#6]">
        <failure>
          <expected>Standard</expected>
          <actual>Silver</actual>
          org.opentest4j.AssertionFailedError: expected: &lt;Standard&gt; but was: &lt;Silver&gt;&#13;
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)&#13;
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)&#13;
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)&#13;
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:182)&#13;
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:177)&#13;
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:1145)&#13;
	at sqa.test.RobustnessTest1.CalculateMembershipRank_Test2(RobustnessTest1.java:17)&#13;
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)&#13;
	at java.base/java.util.Optional.ifPresent(Optional.java:178)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.SliceOps$1$1.accept(SliceOps.java:200)&#13;
	at java.base/java.util.Iterator.forEachRemaining(Iterator.java:133)&#13;
	at java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1939)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)&#13;
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)&#13;
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)&#13;
&#13;

        </failure>
      </testcase>
      <testcase name="CalculateMembershipRank_Test2" classname="sqa.test.RobustnessTest1" time="0.004" dynamicTest="true" displayname="[7] 100001, 15, 500, Standard" parameters="int,int,int,java.lang.String" uniqueid="[engine:junit-jupiter]/[class:sqa.test.RobustnessTest1]/[test-template:CalculateMembershipRank_Test2(int, int, int, java.lang.String)]/[test-template-invocation:#7]">
        <failure>
          <expected>Standard</expected>
          <actual>Silver</actual>
          org.opentest4j.AssertionFailedError: expected: &lt;Standard&gt; but was: &lt;Silver&gt;&#13;
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)&#13;
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)&#13;
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)&#13;
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:182)&#13;
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:177)&#13;
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:1145)&#13;
	at sqa.test.RobustnessTest1.CalculateMembershipRank_Test2(RobustnessTest1.java:17)&#13;
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)&#13;
	at java.base/java.util.Optional.ifPresent(Optional.java:178)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.SliceOps$1$1.accept(SliceOps.java:200)&#13;
	at java.base/java.util.Iterator.forEachRemaining(Iterator.java:133)&#13;
	at java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1939)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)&#13;
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)&#13;
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)&#13;
&#13;

        </failure>
      </testcase>
      <testcase name="CalculateMembershipRank_Test2" classname="sqa.test.RobustnessTest1" time="0.005" dynamicTest="true" displayname="[8] 50000, -1, 500, Error" parameters="int,int,int,java.lang.String" uniqueid="[engine:junit-jupiter]/[class:sqa.test.RobustnessTest1]/[test-template:CalculateMembershipRank_Test2(int, int, int, java.lang.String)]/[test-template-invocation:#8]">
        <failure>
          <expected>Error</expected>
          <actual>Standard</actual>
          org.opentest4j.AssertionFailedError: expected: &lt;Error&gt; but was: &lt;Standard&gt;&#13;
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)&#13;
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)&#13;
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)&#13;
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:182)&#13;
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:177)&#13;
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:1145)&#13;
	at sqa.test.RobustnessTest1.CalculateMembershipRank_Test2(RobustnessTest1.java:17)&#13;
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)&#13;
	at java.base/java.util.Optional.ifPresent(Optional.java:178)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.SliceOps$1$1.accept(SliceOps.java:200)&#13;
	at java.base/java.util.Iterator.forEachRemaining(Iterator.java:133)&#13;
	at java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1939)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)&#13;
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)&#13;
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)&#13;
&#13;

        </failure>
      </testcase>
      <testcase name="CalculateMembershipRank_Test2" classname="sqa.test.RobustnessTest1" time="0.001" dynamicTest="true" displayname="[9] 50000, 0, 500, Standard" parameters="int,int,int,java.lang.String" uniqueid="[engine:junit-jupiter]/[class:sqa.test.RobustnessTest1]/[test-template:CalculateMembershipRank_Test2(int, int, int, java.lang.String)]/[test-template-invocation:#9]"/>
      <testcase name="CalculateMembershipRank_Test2" classname="sqa.test.RobustnessTest1" time="0.004" dynamicTest="true" displayname="[10] 50000, 1, 500, Silver" parameters="int,int,int,java.lang.String" uniqueid="[engine:junit-jupiter]/[class:sqa.test.RobustnessTest1]/[test-template:CalculateMembershipRank_Test2(int, int, int, java.lang.String)]/[test-template-invocation:#10]">
        <failure>
          <expected>Silver</expected>
          <actual>Standard</actual>
          org.opentest4j.AssertionFailedError: expected: &lt;Silver&gt; but was: &lt;Standard&gt;&#13;
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)&#13;
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)&#13;
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)&#13;
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:182)&#13;
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:177)&#13;
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:1145)&#13;
	at sqa.test.RobustnessTest1.CalculateMembershipRank_Test2(RobustnessTest1.java:17)&#13;
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)&#13;
	at java.base/java.util.Optional.ifPresent(Optional.java:178)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.SliceOps$1$1.accept(SliceOps.java:200)&#13;
	at java.base/java.util.Iterator.forEachRemaining(Iterator.java:133)&#13;
	at java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1939)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)&#13;
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)&#13;
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)&#13;
&#13;

        </failure>
      </testcase>
      <testcase name="CalculateMembershipRank_Test2" classname="sqa.test.RobustnessTest1" time="0.003" dynamicTest="true" displayname="[11] 50000, 29, 500, Standard" parameters="int,int,int,java.lang.String" uniqueid="[engine:junit-jupiter]/[class:sqa.test.RobustnessTest1]/[test-template:CalculateMembershipRank_Test2(int, int, int, java.lang.String)]/[test-template-invocation:#11]">
        <failure>
          <expected>Standard</expected>
          <actual>Silver</actual>
          org.opentest4j.AssertionFailedError: expected: &lt;Standard&gt; but was: &lt;Silver&gt;&#13;
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)&#13;
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)&#13;
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)&#13;
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:182)&#13;
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:177)&#13;
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:1145)&#13;
	at sqa.test.RobustnessTest1.CalculateMembershipRank_Test2(RobustnessTest1.java:17)&#13;
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)&#13;
	at java.base/java.util.Optional.ifPresent(Optional.java:178)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.SliceOps$1$1.accept(SliceOps.java:200)&#13;
	at java.base/java.util.Iterator.forEachRemaining(Iterator.java:133)&#13;
	at java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1939)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)&#13;
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)&#13;
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)&#13;
&#13;

        </failure>
      </testcase>
      <testcase name="CalculateMembershipRank_Test2" classname="sqa.test.RobustnessTest1" time="0.002" dynamicTest="true" displayname="[12] 50000, 30, 500, Standard" parameters="int,int,int,java.lang.String" uniqueid="[engine:junit-jupiter]/[class:sqa.test.RobustnessTest1]/[test-template:CalculateMembershipRank_Test2(int, int, int, java.lang.String)]/[test-template-invocation:#12]">
        <failure>
          <expected>Standard</expected>
          <actual>Silver</actual>
          org.opentest4j.AssertionFailedError: expected: &lt;Standard&gt; but was: &lt;Silver&gt;&#13;
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)&#13;
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)&#13;
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)&#13;
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:182)&#13;
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:177)&#13;
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:1145)&#13;
	at sqa.test.RobustnessTest1.CalculateMembershipRank_Test2(RobustnessTest1.java:17)&#13;
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)&#13;
	at java.base/java.util.Optional.ifPresent(Optional.java:178)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.SliceOps$1$1.accept(SliceOps.java:200)&#13;
	at java.base/java.util.Iterator.forEachRemaining(Iterator.java:133)&#13;
	at java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1939)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)&#13;
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)&#13;
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)&#13;
&#13;

        </failure>
      </testcase>
      <testcase name="CalculateMembershipRank_Test2" classname="sqa.test.RobustnessTest1" time="0.004" dynamicTest="true" displayname="[13] 50000, 31, 500, Standard" parameters="int,int,int,java.lang.String" uniqueid="[engine:junit-jupiter]/[class:sqa.test.RobustnessTest1]/[test-template:CalculateMembershipRank_Test2(int, int, int, java.lang.String)]/[test-template-invocation:#13]">
        <failure>
          <expected>Standard</expected>
          <actual>Silver</actual>
          org.opentest4j.AssertionFailedError: expected: &lt;Standard&gt; but was: &lt;Silver&gt;&#13;
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)&#13;
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)&#13;
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)&#13;
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:182)&#13;
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:177)&#13;
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:1145)&#13;
	at sqa.test.RobustnessTest1.CalculateMembershipRank_Test2(RobustnessTest1.java:17)&#13;
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)&#13;
	at java.base/java.util.Optional.ifPresent(Optional.java:178)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.SliceOps$1$1.accept(SliceOps.java:200)&#13;
	at java.base/java.util.Iterator.forEachRemaining(Iterator.java:133)&#13;
	at java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1939)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)&#13;
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)&#13;
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)&#13;
&#13;

        </failure>
      </testcase>
      <testcase name="CalculateMembershipRank_Test2" classname="sqa.test.RobustnessTest1" time="0.002" dynamicTest="true" displayname="[14] 50000, 15, -1, Error" parameters="int,int,int,java.lang.String" uniqueid="[engine:junit-jupiter]/[class:sqa.test.RobustnessTest1]/[test-template:CalculateMembershipRank_Test2(int, int, int, java.lang.String)]/[test-template-invocation:#14]">
        <failure>
          <expected>Error</expected>
          <actual>Standard</actual>
          org.opentest4j.AssertionFailedError: expected: &lt;Error&gt; but was: &lt;Standard&gt;&#13;
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)&#13;
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)&#13;
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)&#13;
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:182)&#13;
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:177)&#13;
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:1145)&#13;
	at sqa.test.RobustnessTest1.CalculateMembershipRank_Test2(RobustnessTest1.java:17)&#13;
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)&#13;
	at java.base/java.util.Optional.ifPresent(Optional.java:178)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.SliceOps$1$1.accept(SliceOps.java:200)&#13;
	at java.base/java.util.Iterator.forEachRemaining(Iterator.java:133)&#13;
	at java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1939)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)&#13;
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)&#13;
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)&#13;
&#13;

        </failure>
      </testcase>
      <testcase name="CalculateMembershipRank_Test2" classname="sqa.test.RobustnessTest1" time="0.001" dynamicTest="true" displayname="[15] 50000, 15, 0, Standard" parameters="int,int,int,java.lang.String" uniqueid="[engine:junit-jupiter]/[class:sqa.test.RobustnessTest1]/[test-template:CalculateMembershipRank_Test2(int, int, int, java.lang.String)]/[test-template-invocation:#15]"/>
      <testcase name="CalculateMembershipRank_Test2" classname="sqa.test.RobustnessTest1" time="0.001" dynamicTest="true" displayname="[16] 50000, 15, 1, Standard" parameters="int,int,int,java.lang.String" uniqueid="[engine:junit-jupiter]/[class:sqa.test.RobustnessTest1]/[test-template:CalculateMembershipRank_Test2(int, int, int, java.lang.String)]/[test-template-invocation:#16]"/>
      <testcase name="CalculateMembershipRank_Test2" classname="sqa.test.RobustnessTest1" time="0.002" dynamicTest="true" displayname="[17] 50000, 15, 999, Standard" parameters="int,int,int,java.lang.String" uniqueid="[engine:junit-jupiter]/[class:sqa.test.RobustnessTest1]/[test-template:CalculateMembershipRank_Test2(int, int, int, java.lang.String)]/[test-template-invocation:#17]">
        <failure>
          <expected>Standard</expected>
          <actual>Silver</actual>
          org.opentest4j.AssertionFailedError: expected: &lt;Standard&gt; but was: &lt;Silver&gt;&#13;
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)&#13;
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)&#13;
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)&#13;
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:182)&#13;
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:177)&#13;
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:1145)&#13;
	at sqa.test.RobustnessTest1.CalculateMembershipRank_Test2(RobustnessTest1.java:17)&#13;
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)&#13;
	at java.base/java.util.Optional.ifPresent(Optional.java:178)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.SliceOps$1$1.accept(SliceOps.java:200)&#13;
	at java.base/java.util.Iterator.forEachRemaining(Iterator.java:133)&#13;
	at java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1939)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)&#13;
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)&#13;
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)&#13;
&#13;

        </failure>
      </testcase>
      <testcase name="CalculateMembershipRank_Test2" classname="sqa.test.RobustnessTest1" time="0.002" dynamicTest="true" displayname="[18] 50000, 15, 1000, Standard" parameters="int,int,int,java.lang.String" uniqueid="[engine:junit-jupiter]/[class:sqa.test.RobustnessTest1]/[test-template:CalculateMembershipRank_Test2(int, int, int, java.lang.String)]/[test-template-invocation:#18]">
        <failure>
          <expected>Standard</expected>
          <actual>Silver</actual>
          org.opentest4j.AssertionFailedError: expected: &lt;Standard&gt; but was: &lt;Silver&gt;&#13;
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)&#13;
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)&#13;
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)&#13;
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:182)&#13;
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:177)&#13;
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:1145)&#13;
	at sqa.test.RobustnessTest1.CalculateMembershipRank_Test2(RobustnessTest1.java:17)&#13;
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)&#13;
	at java.base/java.util.Optional.ifPresent(Optional.java:178)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.SliceOps$1$1.accept(SliceOps.java:200)&#13;
	at java.base/java.util.Iterator.forEachRemaining(Iterator.java:133)&#13;
	at java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1939)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)&#13;
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)&#13;
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)&#13;
&#13;

        </failure>
      </testcase>
      <testcase name="CalculateMembershipRank_Test2" classname="sqa.test.RobustnessTest1" time="0.003" dynamicTest="true" displayname="[19] 50000, 15, 1001, Standard" parameters="int,int,int,java.lang.String" uniqueid="[engine:junit-jupiter]/[class:sqa.test.RobustnessTest1]/[test-template:CalculateMembershipRank_Test2(int, int, int, java.lang.String)]/[test-template-invocation:#19]">
        <failure>
          <expected>Standard</expected>
          <actual>Silver</actual>
          org.opentest4j.AssertionFailedError: expected: &lt;Standard&gt; but was: &lt;Silver&gt;&#13;
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)&#13;
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)&#13;
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)&#13;
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:182)&#13;
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:177)&#13;
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:1145)&#13;
	at sqa.test.RobustnessTest1.CalculateMembershipRank_Test2(RobustnessTest1.java:17)&#13;
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)&#13;
	at java.base/java.util.Optional.ifPresent(Optional.java:178)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.SliceOps$1$1.accept(SliceOps.java:200)&#13;
	at java.base/java.util.Iterator.forEachRemaining(Iterator.java:133)&#13;
	at java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1939)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)&#13;
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)&#13;
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)&#13;
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)&#13;
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)&#13;
&#13;

        </failure>
      </testcase>
    </testsuite>
  </testsuite>
</testrun>
